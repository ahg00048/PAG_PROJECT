@startuml
'https://plantuml.com/class-diagram

class Renderer {
    - _selectedLight : int

    - _selectedModel : int
    - _modelMovement : ModelMove

    - _cameraMovement : CameraMove
    - _cameraCursorMovementAllowed : bool

    - {static} _singleton : Renderer*

    - processNode(aiNode* node, const aiScene *scene)
    - processMesh(aiMesh* mesh)

    - Renderer()

    + {static} getRenderer() : Renderer&

    + init()

    + setClearColor(float R, float G, float B, float A)
    + setCameraMovementAllowed(bool allowed)
    + setCameraMove(Camera move)
    + setCameraPerspProjection(bool perspProjection)
    + setCameraMoveDir(CameraMoveDirection direction)

    + setTriangleMesh(bool triangleMesh)
    + setCurrentModelDiff(const float* diff)
    + setCurrentModelAmb(const float* amb)
    + setCurrentModelSpec(const float* spec)
    + setCurrentModelPhongEXP(float phongExp)

    + getClearColor() : glm::vec4
    + getCamera() : Camera&
    + getShaderProgram() : ShaderProgram&

    + getCurrentModelDiff() : const glm::vec3&
    + getCurrentModelAmb() : const glm::vec3&
    + getCurrentModelSpec() : const glm::vec3&
    + getCurrentModelPhongExp() : float

    + getCurrentLightDiff() : const glm::vec3&
    + getCurrentLightAmb() : const glm::vec3&
    + getCurrentLightSpec() : const glm::vec3&
    + getCurrentLightGamma() : float
    + getCurrentLightAttenuation() : float

    + setCurrentLightDiff(const float* diff)
    + setCurrentLightAmb(const float* amb)
    + setCurrentLightSpec(const float* spec)
    + setCurrentLightGamma(float gamma)
    + setCurrentLightAttenuation(float s)

    + getSelectedLight() const : int
    + setSelectedLight(int selected) : bool

    + creaTriangulo()
    + crearModelo(const std::string& path)
    + destruirModeloSeleccionado()

    + cursorPos(double xPos, double yPos, float deltaTime)
    + refrescar()
    + ratonRueda(double xoffset, double yoffset)
    + tamanoViewport(int width, int height)

    + getInforme() : std::string
}

class GUI {
    - {static} _singleton : GUI*
    - GUI()
    - _messages : deque<string>
    - _windowPos : array<float, 6>
    - _buttonState : bool
    - _shaderName : string

    + {static} getGUI() : &GUI

    + init()
    + newFrame()
    + render()
    + addMessage(const std::string& newMessage)
    + freeResources()

    + setPhonExpSetting(float phongExp)
    + setDiffSetting(float x, float y, float z)
    + setAmbSetting(float x, float y, float z)
    + setSpecSetting(float x, float y, float z)

    + setLDiffSetting(float x, float y, float z)
    + setLAmbSetting(float x, float y, float z)
    + setLSpecSetting(float x, float y, float z)
    + setGamma(float gamma)
    + setAttenuation(float s)

    + setColorPickerWindowPos(float&& x, float&& y)
    + setMessagesWindowPos(float&& x, float&& y)
    + setShaderLoaderWindowPos(float&& x, float&& y)
    + setCameraWindowPos(float&& x, float&& y)
    + setModelMoveSetWindowPos(float&& x, float&& y)
    + setFileExplorerWindowPos(float&& x, float&& y)
    + setRendererPropertiesWindowPos(float&& x, float&& y)
    + setLightingWindowPos(float&& x, float&& y)

    + createWindows()

    + getPhongExpSetting() const : float
    + getDiffSetting() const : const float*
    + getAmbSetting() const : const float*
    + getSpecSetting() const : const float*

    + getColor() : ImVec4
    + setColor(float x, float y, float z, float w)
    + getShaderButtonState() : bool
    + setShaderButtonState(bool buttonState)
    + getCameraSelectedMove() : CameraMove
    + getCameraPerspProjection() : bool
    + getShaderName() : const std::string&
    + getCameraMoveDirection() : CameraMoveDirection
    + captureMouse() : bool

    + getModelMove() const : ModelMove
    + getModelMoveDirection() const : ModelMoveDirection
    + getSelectedModel() const : int
    + getNumberModels() const : int

    + destroyModel() const : bool
    + resetDestroySelectedModelButton()

    + setZoom(float zoom)
    + getZoom() : float

    + getTriangleMesh() const : bool

    + setSelectedModel(int selectedModel)
    + setNumberModels(int numberModels)

    + ObjFileHasBeenSelected() : bool
    + getSelectedObjFile() : std::string
    + clearSelectedObjFile()

    + resetCameraButtons()
    + resetModelButtons()

    + getSelectedLight() const : int
    + getNumberLights() const : int
    + setSelectedLight(int selectedLight)
    + setNumberLights(int numberLights)
}

class Shader {
    - _id : GLuint
    - _content : std::string
    - _type : ShaderType

    + Shader()
    + Shader(ShaderType type)
    + Shader(ShaderType type, const std::string& path)
    + Shader(const Shader& orig)
    + ~Shader()

    + setType(const ShaderType type)

    + getId() : GLuint
    + getType() : ShaderType

    + setContent(const std::string& content)
    + setContentFromFile(const std::string& path)
    + empty() : bool
    + compile()
    + compiledSuccessfully() : bool

    + deleteShader()
}

class ShaderProgram {
    - _id : GLuint

    + ShaderProgram()
    + ShaderProgram(const ShaderProgram& orig)
    + ~ShaderProgram()

    + createShaderProgram()
    + createdSuccessfully() : bool
    + use()
    + deleteShaderProgram()

    + addShader(Shader&& shader)
    + removeShader(ShaderType type)
    + getShaders() : std::vector<std::shared_ptr<Shader>>

    + setUniform(const std::string& var, const glm::mat4& mat4)
    + setUniformSubroutine(const std::string& var, ShaderType type) const
}

class Camera {
    - _zNear : float
    - _zFar : float
    - _left : float
    - _right : float
    - _top : float
    - _botton : float
    - _angle : float
    - _scope : float
    - _positon : glm::vec3
    - _target : glm::vec3
    - _upVec : glm::vec3
    - _perspProj : bool

    - getOrthographicProjection() : glm::mat4
    - getPerspectiveProjection() : glm::mat4

    - zoomOrtho(float offset)
    - zoomPersp(float angle)

    + Camera()
    + Camera(const Camera& orig)
    + ~Camera()

    + setScope(float scope)
    + setProjType(bool perspProj)

    + getProjection() : glm::mat4
    + getVision() : glm::mat4

    + tilt(float angle)
    + pan(float angle)
    + dolly(float xMovement, float yMovement)
    + crane(float yMovement)
    + orbit(float xAngle, float yAngle)
    + zoom(float value)
}

class Model {
        - _idVAO : GLuint
        - _idIBO : GLuint
        - _idVBO : GLuint

        - _vertexAtributtes : std::vector<vertex>
        - _indexes : std::vector<unsigned int>

        - _transformMatrix :  glm::mat4

        + Model();
        + Model(const std::vector<vertex>& vertexAtributtes, const std::vector<unsigned int>& indexes);
        + Model(const Model& orig);
        + ~Model();

        + setVertexAttributtes(const std::vector<vertex>& vertexAtributtes);
        + setIndexes(const std::vector<unsigned int>& indexes);
        + setMaterial(Material* material);

        + getModelMatrix() const : const glm::mat4&;
        + getMaterial() : Material*

        + createModel();
        + destroyModel();
        + render();

        + translateModel(const glm::vec3& translation);
        + scaleModel(const glm::vec3& scale);
        + rotateModel(float angle, const glm::vec3& axis);
}

class Material {
        - _diffuse : glm::vec3
        - _ambient : glm::vec3
        - _specular : glm::vec3
        - _phongExp : float

        - setDiffuse(const glm::vec3& diffuse);
        - setAmbient(const glm::vec3& ambient);
        - setSpecular(const glm::vec3& specular);
        - setPhongExp(float phongExp);

        - getDiffuse() const : const glm::vec3&
        - getAmbient() const : const glm::vec3&
        - getSpecular() const : const glm::vec3&
        - getPhongExp() const : float
}

interface LightApplicator {
    + {abstract} applySubroutine(ShaderProgram& shaderProgram)
    + {abstract} applyLight(LightProperties& properties, const glm::mat4& vision, ShaderProgram& shaderProgram)
}

class SpotLightApplicator {
    + applySubroutine(ShaderProgram& shaderProgram)
    + applyLight(LightProperties& properties, const glm::mat4& vision, ShaderProgram& shaderProgram)
}

class PointLightApplicator {
    + applySubroutine(ShaderProgram& shaderProgram)
    + applyLight(LightProperties& properties, const glm::mat4& vision, ShaderProgram& shaderProgram)
}

class DirectionalLightApplicator {
    + applySubroutine(ShaderProgram& shaderProgram)
    + applyLight(LightProperties& properties, const glm::mat4& vision, ShaderProgram& shaderProgram)
}

class AmbientLightApplicator {
    + applySubroutine(ShaderProgram& shaderProgram)
    + applyLight(LightProperties& properties, const glm::mat4& vision, ShaderProgram& shaderProgram)
}

class Light {
    - _vision : glm::mat4
    - _applicatorSelected : LightApplicatorType

    + Light();
    + ~Light();

    + setDI(const glm::vec3& DI)
    + setAI(const glm::vec3& AI)
    + setSI(const glm::vec3& SI)
    + setPosition(const glm::vec3& pos)
    + setDirection(const glm::vec3& dir)
    + setGamma(float gamma)
    + setAttenuation(float s)
    + setVision(const glm::mat4& vision)

    + getDI() : const glm::vec3&
    + getAI() : const glm::vec3&
    + getSI() : const glm::vec3&
    + getPostition() : const glm::vec3&
    + getDirection() : const glm::vec3&
    + getGamma() : float
    + getAttenuation() : float
    + getVision() : const glm::mat4&

    + setLightApplicator(LightApplicatorType applicatorSelected)
    + setSubroutine(ShaderProgram& shaderProgram)
    + applyLight(ShaderProgram& shaderProgram)
}

struct LightProperties {
    + _dI : glm::vec3
    + _aI : glm::vec3
    + _sI : glm::vec3
    + _p : glm::vec3
    + _d : glm::vec3
    + _gamma : float
    + _s : float
}

LightApplicator <|-- SpotLightApplicator
LightApplicator <|-- PointLightApplicator
LightApplicator <|-- AmbientLightApplicator
LightApplicator <|-- DirectionalLightApplicator

Light "1" *-- "1" LightProperties : _properties
Light "1" *-- "4" LightApplicator : _applicators
Model "1..*" <-- "1" Material : _material
ShaderProgram "1..*" o-- "1..*" Shader : _shaders
Renderer "1" *-- "1" ShaderProgram : _shaderProgram
Renderer "1" *-- "*" Model : _models
Renderer "1" *-- "1" Camera : _camera
Renderer "1" *-- "4" Light : _lights

@enduml